function run_analysis( root, search_description, save_description, do_skip, do_approx)
    addpath('analysis');
    variable_def
    %search_description = gen_search_description( query, num_concepts, concept_type );

    %Do automated relationship merging first
    knowledge_root = [root '/structure/'];
    %relationAnalysis_pmi_merge(root, search_description, 'Freebase', .9, do_skip, 1); %Currently skipping pmi merging
    %relationAnalysis_pmi_merge(root, search_description, 'ConceptNet', .7, do_skip, 1);
    
    if do_approx
        [codata, codataDims] = cooccurrenceAnalysis(root, search_description, 'flickr_comatrix_approx', 'images', do_skip);
    else
        [codata, codataDims] = cooccurrenceAnalysis(root, search_description, 'flickr_comatrix_low_mem', 'owners', do_skip);
    end
        
    [data, header, concepts] = conceptAnalysis(root, search_description, do_skip);

    %Manual relationship merging
    freebase_path = sprintf('%s/structure/%s_Freebase_adjacency.mat', root, search_description);
    freebase = load(freebase_path);
    conceptnet_path = sprintf('%s/structure/%s_ConceptNet_adjacency.mat', root, search_description);
    conceptnet = load(conceptnet_path);  

    freebase_include_relation_str = {'/biology/organism_classification/higher_classification', ...
        '/biology/organism_classification/lower_classifications', ...
        '/biology/domesticated_animal/breeds', ...
        '/biology/animal_breed/breed_of', ...
        '/location/administrative_division/country', ...
        '/location/administrative_division/first_level_division_of', ...
        '/location/administrative_division/second_level_division_of', ...
        '/location/country/capital', ...
        '/location/country/administrative_divisions', ...
        '/location/country/first_level_divisions', ...
        '/location/location/contains', ...
        '/location/location/containedby', ...
        '/location/location/partially_contains', ... 
        '/location/location/partially_containedby', ...
        '/location/location/adjectival_form', ...
        '/location/country/iso3166_1_shortname', ...
        '/location/country/fifa_code', ...
        '/location/country/iso_alpha_3', ...
        '/olympics/olympic_participating_country/ioc_code'};
    
    [lia, freebase_include_relation_loc] = ismember(freebase_include_relation_str, cellstr(freebase.attributes.relations));
    freebase_include_relation_str = freebase_include_relation_str(lia); 
    freebase_include_relations = freebase.adjacency(:, freebase_include_relation_loc(lia));
    
    relations = [conceptnet.adjacency freebase_include_relations];
    relation_str = [cellstr(conceptnet.attributes.relations); freebase_include_relation_str'];
    relations_shape = [conceptnet.shape(1:2) conceptnet.shape(3)+length(freebase_include_relation_str)]; 
    clear 'conceptnet' 'freebase';
    
    data = load(sprintf('%s/Flickr_concepts/%s_analysis.mat', root, search_description));
     
    %Save list of 'RelatedTo' relationships before excluding from
    %relationship list
    general_relationship = relations(:, ismember(relation_str, {'RelatedTo'}));
    save(sprintf('%s/structure/%s_RelatedTo.mat', root, search_description), 'general_relationship');
    
    %Exclude
    excludeRelationships = {'Antonym', 'RelatedTo', 'HasPrerequisite', ...
            'HasSubevent', 'HasFirstSubevent', 'HasLastSubevent', 'DesireOf', ...
            'Desires', 'Synonym', 'DefinedAs', 'DerivedFrom', 'InheritsFrom', ...
            'InstanceOf', 'TranslationOf', 'SymbolOf', ...
            '/common/topic/notable_for', '/type/object/type'};
    %Exclude all Not relationships
    not_relationship_ind = cellfun(@(x) ~isempty(x), regexpi(relation_str, '^not')); 
    excludeRelationships = [excludeRelationships relation_str(not_relationship_ind)'];    
    [relations, relation_str] = remove_relations(relations, relation_str, ...
        excludeRelationships);
    
    %Filter
    [relations] = filter_pos_relations(data, relations, relation_str, ...
        {'PartOf', 'HasA', 'IsA', 'AtLocation', 'CreatedBy', 'MadeOf', 'LocatedNear', 'SimilarSize'}, ...
        'pos_N', false, ...
        'pos_N', false);
    
    [relations] = filter_pos_relations(data, relations, relation_str, ...
        {'CapableOf', 'ReceivesAction'}, ...
        'pos_N', false, ...
        'pos_V', false);
    
    [relations] = filter_pos_relations(data, relations, relation_str, ...
        {'HasProperty'}, ...
        'pos_N', false, ...
        'pos_A', false);
    
    [relations] = filter_pos_relations(data, relations, relation_str, ...
        {'UsedFor'}, ...
        'pos_N', false, ...
        'pos_A', true);
    
    [relations] = filter_pos_relations(data, relations, relation_str, ...
        {'LocationOfAction'}, ...
        'pos_V', false, ...
        'pos_N', false);
    
    [relations] = filter_pos_relations(data, relations, relation_str, ...
        {'HasProperty'}, ...
        'isColor', true, ...
        '', false);
       
    [relations] = filter_pos_relations(data, relations, relation_str, ...
        {'PartOf'}, ...
        'isLocation', true, ...
        'isLocation', true);
    
    %Split and merge
    [relations, relation_str] = split_relations(data, relations, ...
        relation_str, {'AtLocation'}, 'isLocation', 'isLocation', ...
        {'GeographicLocation'}, {'AtLocation'});
    [relations, relation_str] = split_relations(data, relations, ...
        relation_str, {'AtLocation'}, 'isLocation', {}, ...
        {'AtLocationGeographicFirstConcept'}, {'AtLocation'});
    [relations, relation_str] = split_relations(data, relations, ...
        relation_str, {'AtLocation'}, {}, 'isLocation', ...
        {'AtLocationGeographicSecondConcept'}, {'AtLocation'});

    [relations, relation_str] = merge_relations(relations, relation_str, ...
        {'AtLocationGeographicFirstConcept', ...
        'AtLocationGeographicSecondConcept'}, ...
        [1 -1], ...
        'AtLocationGeographic', relations_shape);
    
    [relations, relation_str] = merge_relations(relations, relation_str, ...
        {'/biology/organism_classification/higher_classification', ...
        '/biology/organism_classification/lower_classifications', ...
        '/biology/domesticated_animal/breeds', ...
        '/biology/animal_breed/breed_of', ...
        'IsA'}, ...
        [1 -1 -1 1 1], ...
        'IsA', relations_shape);
    
    [relations, relation_str] = split_relations(data, relations, ...
        relation_str, {'PartOf'}, 'isLocation', 'isLocation', ...
        {'PartOfGeographic'}, {'PartOf'});
    clear data
    
    [relations, relation_str] = merge_relations(relations, relation_str, ...
        {'/location/location/adjectival_form', ...
        '/location/country/iso3166_1_shortname', ...
        '/location/country/fifa_code', ...
        '/location/country/iso_alpha_3', ...
        '/olympics/olympic_participating_country/ioc_code'}, ...
        [1 -1 1 1 1], ...
        'GeographicAdjective', relations_shape);
    
    [relations, relation_str] = merge_relations(relations, relation_str, ...
        {'GeographicLocation', ...
        'PartOfGeographic', ...
        '/location/administrative_division/country', ...
        '/location/administrative_division/first_level_division_of', ...
        '/location/administrative_division/second_level_division_of', ...
        '/location/location/partially_containedby', ...
        '/location/location/containedby', ...  %Reversed relationships follow
        '/location/country/administrative_divisions', ...
        '/location/country/first_level_divisions', ...
        '/location/location/contains', ...
        '/location/location/partially_contains', ... 
        '/location/country/capital'}, ...
        [1 1 1 1 1 1 1 -1 -1 -1 -1 -1], ...
        'GeographicContainment', relations_shape);

    %Disjoint
    [relations] = make_disjoint_relations(relations, relation_str, ...
        {'GeographicContainment'}, {'AtLocationGeographic'});     
        
    [relations] = make_disjoint_relations(relations, relation_str, ...
        {'HasA'}, {'AtLocation'}); 

    [relations] = make_disjoint_relations(relations, relation_str, ...
        {'PartOf'}, {'AtLocation'}); 
    
    save_path = sprintf('%s/structure/%s_manual_merged_adjacency_pos.mat', root, search_description);
    save(save_path, 'relations', 'relation_str');

%    max_concepts = 2000;
%    [result, result_header] = retrieve_scores(root, search_description, 'default', 'all', max_concepts);
%    save_description = gen_search_description( query, max_concepts, concept_type );
%     filepath = sprintf('%s/Flickr_cooccurrence/%s_all_edges.mat', stats_root, save_description, '-v7.3');
%     save(filepath, 'result', 'result_header');
    
%    filepath = sprintf('%s\\%s_all_edges.xlsx', root, save_description);
    %xlswrite(filepath, [result_header; result]); 
end